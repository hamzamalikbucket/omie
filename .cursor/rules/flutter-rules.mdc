---
description:  Try not to delete comments or print statements. In Flutter, use cascade operators when you can. If in dart you do print add a [FunctionName] to it, like the actual string for the function name. Try to have a lot of comments, when refactoring or creating code take the chance to add as many comments as you can and is prudent, with multi-line, fancy formatting if necessary for explanations. If you are unsure about names or member variables, feel free to remind me/ask me for full codebase context.  If we are designing a UI, try to use Apple's Human Interface Guidelines, let's make something sleek, sexy, modern, and easy to use if we are doing UI stuff, with nice animations too if we can. Really modern and sexy sleek minimal apple style MacOS style UI design, make it sexy, sleek. Animations, UI. Modern, amazing STEVE JOBS LEVEL lets GO! Always reaffirm to me that we are doing it using Apple Guidelines and how we used them in this design (if we are doing UI).  When adding to or refactoring code, especially visual elements, unless I specify we are changing the functionality, try your best to maintain the exact same functionality just as it was, just with edits or new bits. PLEASE BE SURE NOT TO CHANGE FUNCTIONALITY SERIOUSLY, DOUBLE CHECK YOURSELF. Do not remove stuff just for the sake of removing it unless I ASK when we are refactoring! So you don't break things uninentionally. use Bloc always don't use the setstate  Please do NOT make random guesses on variable names or include paths. Always reference the codebase to see if we have something existing before deciding to randomly make new classes or make up member variable names. DO not hallucinate variable names, feel free to ask if you need context for a file.  If you are the composer, don't be afraid to search the codebase for files you need to.
globs: 
alwaysApply: false
---

Don't use stateful widgets.

Try not to delete comments or print statements. In Flutter, use cascade operators when you can. If in dart you do print add a [FunctionName] to it, like the actual string for the function name. Try to have a lot of comments, when refactoring or creating code take the chance to add as many comments as you can and is prudent, with multi-line, fancy formatting if necessary for explanations. If you are unsure about names or member variables, feel free to remind me/ask me for full codebase context.

If we are designing a UI, try to use Apple's Human Interface Guidelines, let's make something sleek, sexy, modern, and easy to use if we are doing UI stuff, with nice animations too if we can. Really modern and sexy sleek minimal apple style MacOS style UI design, make it sexy, sleek. Animations, UI. Modern, amazing STEVE JOBS LEVEL lets GO! Always reaffirm to me that we are doing it using Apple Guidelines and how we used them in this design (if we are doing UI).

When adding to or refactoring code, especially visual elements, unless I specify we are changing the functionality, try your best to maintain the exact same functionality just as it was, just with edits or new bits. PLEASE BE SURE NOT TO CHANGE FUNCTIONALITY SERIOUSLY, DOUBLE CHECK YOURSELF. Do not remove stuff just for the sake of removing it unless I ASK when we are refactoring! So you don't break things uninentionally.
use Bloc always don't use the setstate

Please do NOT make random guesses on variable names or include paths. Always reference the codebase to see if we have something existing before deciding to randomly make new classes or make up member variable names. DO not hallucinate variable names, feel free to ask if you need context for a file.

If you are the composer, don't be afraid to search the codebase for files you need to.
